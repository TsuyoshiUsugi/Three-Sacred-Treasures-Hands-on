@startuml

skinparam DefaultFontName JetBrains Mono

skinparam class {
  ArrowColor Black
  ActorBorderColor Black
}

package DQEmulation #yellow
{
    package Domain #00FF00
    {
        package Entity <<DataBase>> #00FF66
        {
            interface IAudioEntity
            {
                Name : string
                Clip : AudioClip
            }

            class PlayerEntity
            {
                Name : string
                Figure : Sprite
                MaxHitPoint : float
                DamagePower : float
                HealPower : float
            }

            class EnemyEntity
            {
                Name : string
                Figure : Sprite
                MaxHitPoint : float
                DamagePower : float
            }

            class BGMEntity

            class PlayerData<ScriptableObject>

            class EnemyData<ScriptableObject>

            class BGMData<ScriptableObject>
        }

        package Repository #yellowgreen
        {
            interface IPlayerRepository
            {
                + PlayerEntities : List<PlayerEntity>
                + GetPlayerEntity (int) : PlayerEntity
            }

            interface IEnemyRepository
            {
                + EnemyEntities : List<EnemyEntity>
                + GetEnemyEntity (int) : EnemyEntity
            }

            interface IBGMRepository
            {
                + BGMEntities : List<BGMEntity>
                + GetBGMEntity(int) : BGMEntity
                + Volume : float
            }

            class PlayerRepository
            {
                - PlayerData
            }

            class EnemyRepository
            {
                - EnemyData
            }

            class BGMRepository
            {
                - BGMData
            }
        }

        package Model #00CC00
        {
            interface ICreature
            {
                Name : string
                Figure : Sprite
            }

            interface IDamageable
            {
                DamagePower : float
                OnDamageAsObservable() : IO<float>
                TakeDamage(string attackerName, float damagePoint)
                HitPoint : IRORP<float>
                MaxHitPoint : float
            }

            interface IDieable
            {
                OnDiedAsObservable() : IO<string>
            }

            interface IHealable
            {
                HealPower : float
                OnHealedAsObservable() : IO<float>
                Heal(float healedPoint))
            }

            interface IEnemy

            interface IPlayer

            class PlayerModel

            class EnemyModel
        }

        package UseCase
        {
            interface IBGMPlayer
            {
                Volume : IRORP<float>
                Play(string)
                Play(int)
                Stop()
                AdjustVolume(float)
            }

            class BGMPlayer
        }
    }

    package Presentation #00FFFF
    {
        package View #8EB8FF
        {
            interface IAttackTrigger
            {
                OnAttackTriggerAsObservable() : IO<string>
            }

            interface IHealTrigger
            {
                OnHealTriggerAsObservable() : IO<string>
            }

            interface ICreatureView
            {
                DisplayName(string name);
                DisplayFigure(Sprite figure);
            }

            interface IDamagedView
            {
                DisplayHp(float hp);
                DisplayDamaged(float damagedPoint);
            }

            interface IHealedView
            {
                DisplayHealed(float healedPoint);
            }

            interface IDiedView
            {
                DisplayDied(string killerName);
            }

            interface IPlayerView

            interface IEnemyView

            class PlayerView

            class EnemyView

            'class MessageView
            '{
            '    + DisplayMessage(string message)
            '}

            class PlayerSettingsView
            {
                + AdjustBGMSlider(float volumeRate)
            }
        }

        package Presenter #136FFF
        {
            class DQEmulationPresenter

            class PlayerSettingsPresenter
        }
    }
}

'Domain

''Entity

PlayerData "1" *-up- "0..*" PlayerEntity
EnemyData "1" *-up- "0..*" EnemyEntity
BGMData "1" *-up- "0..*" BGMEntity
IAudioEntity <|.ri. BGMEntity

''Repository

IPlayerRepository <|.up. PlayerRepository
PlayerData <.. PlayerRepository

IEnemyRepository <|.up. EnemyRepository
EnemyData <. EnemyRepository

IBGMRepository <|.up. BGMRepository
BGMData <.. BGMRepository

''Model

'''IPlayer

ICreature <|.up. IPlayer
IDamageable <|.up. IPlayer
IDieable <|.up. IPlayer
IHealable <|.ri. IPlayer

'''IEnemy

ICreature <|.up. IEnemy
IDamageable <|.up. IEnemy
IDieable <|.up. IEnemy

'''PlayerModel

IPlayerRepository <.. PlayerModel
IPlayer <|.up. PlayerModel

'''EnemyModel

IEnemyRepository <.. EnemyModel
IEnemy <|.up. EnemyModel

'' Service

IBGMRepository <.up. BGMPlayer
IBGMPlayer <|.le. BGMPlayer

' Presentation

'' Presenter

IPlayerView <.up. DQEmulationPresenter
IPlayer <.up. DQEmulationPresenter
IEnemyView <.up. DQEmulationPresenter
IEnemy <.up. DQEmulationPresenter
'MessageView <.up. DQEmulationPresenter

PlayerSettingsView <.up. PlayerSettingsPresenter
IBGMPlayer <.. PlayerSettingsPresenter

'' View

IAttackTrigger <|.up. IPlayerView
IHealTrigger <|.up. IPlayerView
ICreatureView <|.up. IPlayerView
IDamagedView <|.up. IPlayerView
IHealedView <|.up. IPlayerView
IDiedView <|.up. IPlayerView
IPlayerView <|.le. PlayerView

IAttackTrigger <|.up. IEnemyView
ICreatureView <|.up. IEnemyView
IDamagedView <|.up. IEnemyView
IDiedView <|.up. IEnemyView
IEnemyView <|.ri. EnemyView

@enduml